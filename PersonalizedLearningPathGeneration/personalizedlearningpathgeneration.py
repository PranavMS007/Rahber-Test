# -*- coding: utf-8 -*-
"""PersonalizedLearningPathGeneration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h_3VB_-AsbwfDESEMfigLDFyY38sITq_
"""

class User:
    def __init__(self, user_id, interests, past_courses, performance_data, learning_goals):
        self.user_id = user_id
        self.interests = interests
        self.past_courses = past_courses
        self.performance_data = performance_data
        self.learning_goals = learning_goals

class Course:
    def __init__(self, course_id, title, topics, difficulty, completion_time, prerequisites):
        self.course_id = course_id
        self.title = title
        self.topics = topics
        self.difficulty = difficulty
        self.completion_time = completion_time
        self.prerequisites = prerequisites

def generate_learning_path(user, all_courses):
    potential_courses = filter_courses(user.interests, user.past_courses, all_courses)
    ranked_courses = rank_courses(potential_courses, user.performance_data, user.learning_goals)
    learning_path = create_path(ranked_courses, user)
    return learning_path

def filter_courses(interests, past_courses, all_courses):
    filtered_courses = []
    for course in all_courses:
        if any(topic in interests for topic in course.topics) and course.course_id not in past_courses:
            filtered_courses.append(course)
    return filtered_courses

def rank_courses(potential_courses, performance_data, learning_goals):
    # This function should rank courses based on performance data and learning goals
    # For simplicity, we'll return the courses as is
    return potential_courses

def create_path(ranked_courses, user):
    learning_path = []
    for course in ranked_courses:
        if meets_prerequisites(course, user.past_courses):
            learning_path.append(course)
    return learning_path

def meets_prerequisites(course, past_courses):
    return all(prereq in past_courses for prereq in course.prerequisites)

# Example usage
user = User(
    user_id='123',
    interests=['Data Analysis', 'Statistics'],
    past_courses=['Intro to Python'],
    performance_data={'Intro to Python': 'A'},
    learning_goals=['Become a data scientist']
)

all_courses = [
    Course(
        course_id='1',
        title='Data Science 101',
        topics=['Data Analysis', 'Statistics'],
        difficulty='Beginner',
        completion_time=10,
        prerequisites=['Intro to Python']
    ),
    Course(
        course_id='2',
        title='Machine Learning Advanced',
        topics=['Machine Learning'],
        difficulty='Advanced',
        completion_time=20,
        prerequisites=['Data Science 101']
    )
]

learning_path = generate_learning_path(user, all_courses)
for course in learning_path:
    print(f"Course Title: {course.title}")